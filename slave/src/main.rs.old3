
// === slave.rs ===
use qt4004core::{QT4004, program_from_seed};
use serde::{Deserialize, Serialize};
use std::{
    env,
    io::{Read, Write},
    net::TcpStream,
    sync::{Arc, Mutex},
    thread,
    time::Duration,
};

#[derive(Clone, Serialize, Deserialize)]
struct WorkBatch {
    start: u128,
    end: u128,
}

#[derive(Clone, Serialize, Deserialize)]
struct WorkResult {
    best_program: [i8; 16],
    steps: u64,
}

fn worker(
    id: usize,
    start: u128,
    end: u128,
    step_by: usize,
    result: Arc<Mutex<(u64, [i8; 16])>>,
) {
    let mut processor = QT4004::new();
    let mut local_best_steps = 0;
    let mut local_best_program = [0i8; 16];

    for seed in (start..end).step_by(step_by) {
        let program = program_from_seed(seed);
        processor.load(program);
        let steps = processor.run();
        if steps > local_best_steps {
            local_best_steps = steps;
            local_best_program = program;
        }
    }

    let mut res = result.lock().unwrap();
    if local_best_steps > res.0 {
        *res = (local_best_steps, local_best_program);
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let thread_count: usize = args.get(1).and_then(|s| s.parse().ok()).unwrap_or(4);
    let server_addr = args.get(2).map(|s| s.as_str()).unwrap_or("127.0.0.1:7878");
    let sub_batch_size: u128 = args.get(3).and_then(|s| s.parse().ok()).unwrap_or(10000);

    loop {
        match TcpStream::connect(server_addr) {
            Ok(mut stream) => {
                let mut buffer = [0; 1024];
                if let Ok(n) = stream.read(&mut buffer) {
                    if let Ok(batch) = serde_json::from_slice::<WorkBatch>(&buffer[..n]) {
                        println!("Received batch: {} -> {}", batch.start, batch.end);

                        let result = Arc::new(Mutex::new((0u64, [0i8; 16])));
                        let mut handles = vec![];

                        for id in 0..thread_count {
                            let result_clone = Arc::clone(&result);
                            let start = batch.start;
                            let end = batch.end;
                            handles.push(thread::spawn(move || {
                                worker(id, start, end, sub_batch_size, result_clone);
                            }));
                        }

                        for handle in handles {
                            let _ = handle.join();
                        }

                        let (best_steps, best_program) = *result.lock().unwrap();

                        let result = WorkResult {
                            best_program,
                            steps: best_steps,
                        };

                        let json = serde_json::to_vec(&result).unwrap();
                        let _ = stream.write_all(&json);
                    }
                }
            }
            Err(e) => {
                eprintln!("Connection error: {}", e);
                thread::sleep(Duration::from_secs(2));
            }
        }
    }
}
